////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Support\DbSingleResult.cs
//
// summary:	Implements the database single result class
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;

namespace LawsonOperationResult
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Encapsulates the result of a database single. </summary>
	///
	/// <typeparam name="T">	Generic type parameter. </typeparam>
	///
	/// <seealso cref="T:LawsonOperationResult.DBSupport.DbResult"/>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	public class DbSingleResult<T> :  DbResult
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets or sets the query result. </summary>
		///
		/// <value>	The query result. </value>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		public T QueryResult { get; set; }

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Constructor. </summary>
		///
		/// <param name="result">	The result. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		public DbSingleResult(T result)
			: base(result != null)
		{
			QueryResult = result;
		}

		

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Constructor. </summary>
		///
		/// <param name="ex">	The ex. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		public DbSingleResult(Exception ex)
			: base(ex)
		{
		}


	}
}
